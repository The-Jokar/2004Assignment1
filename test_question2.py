import unittest
from question2 import TreeMap


class Test_Question2(unittest.TestCase):
    def test_given_example(self):
        # Example 1
        # The roads represented as a list of tuples
        roads = [
            (0, 1, 4),
            (1, 2, 2),
            (2, 3, 3),
            (3, 4, 1),
            (1, 5, 2),
            (5, 6, 5),
            (6, 3, 2),
            (6, 4, 3),
            (1, 7, 4),
            (7, 8, 2),
            (8, 7, 2),
            (7, 3, 2),
            (8, 0, 11),
            (4, 3, 1),
            (4, 8, 10),
        ]
        # The solulus represented as a list of tuples
        solulus = [(5, 10, 0), (6, 1, 6), (7, 5, 7), (0, 5, 2), (8, 4, 8)]
        # Creating a TreeMap object based on the given roads
        myforest = TreeMap(roads, solulus)

        # Example 1.1
        self.assertEqual(myforest.escape(1, [7, 2, 4]), (9, [1, 7]))

        # Example 1.2
        self.assertEqual(myforest.escape(7, [8]), (6, [7, 8]))

        # Example 1.3
        self.assertEqual(myforest.escape(1, [3, 4]), (10, [1, 5, 6, 3]))

        # Example 1.4
        self.assertIn(
            myforest.escape(1, [0, 4]), [(11, [1, 5, 6, 4]), (11, [1, 5, 6, 3, 4])]
        )

        # Example 1.5
        self.assertEqual(myforest.escape(3, [4]), (20, [3, 4, 8, 7, 3, 4]))

        # Example 1.6
        self.assertEqual(myforest.escape(8, [2]), (16, [8, 0, 2]))

    def test_basic_escape(self):
        roads = [(0, 1, 10), (1, 2, 20), (2, 3, 30), (3, 4, 40)]
        solulus = [(2, 5, 2)]  # doesn't teleport

        myforest = TreeMap(roads, solulus)

        self.assertEqual(myforest.escape(0, [4]), (105, [0, 1, 2, 3, 4]))

        solulus = [(2, 0, 2)]  # Zero claw time
        myforest = TreeMap(roads, solulus)
        self.assertEqual(myforest.escape(0, [4]), (100, [0, 1, 2, 3, 4]))

    def test_no_answer(self):
        roads = [(0, 1, 10), (1, 2, 20), (2, 3, 30), (3, 4, 40)]
        myforest = TreeMap(roads, [])  # no solulu
        self.assertIsNone(myforest.escape(0, [2]))

        myforest = TreeMap(roads, [(4, 5, 4)])  # solulu is unescapable
        self.assertIsNone(myforest.escape(0, [2]))

        roads = [(0, 1, 10), (0, 2, 10)]  # Exit has no incoming roads
        myforest = TreeMap(roads, [(1, 5, 2)])
        self.assertIsNone(myforest.escape(0, [0]))

    def test_nam_examples(self):
        # The roads represented as a list of tuples
        roads = [
            (0, 1, 4),
            (1, 2, 2),
            (2, 3, 3),
            (3, 4, 1),
            (1, 5, 2),
            (5, 6, 5),
            (6, 3, 2),
            (6, 4, 3),
            (1, 7, 4),
            (7, 8, 2),
            (8, 7, 2),
            (7, 3, 2),
            (8, 0, 11),
            (4, 3, 1),
            (4, 8, 10),
        ]

        # The solulus represented as a list of tuples
        solulus = [(5, 10, 0), (6, 1, 6), (7, 5, 7), (0, 5, 2), (8, 4, 8)]

        # Creating a TreeMap object based on the given roads
        myforest = TreeMap(roads, solulus)

        test_cases = [
            (1, [7, 2, 4]),
            (7, [8]),
            (1, [3, 4]),
            (1, [0, 4]),
            (3, [4]),
            (8, [2]),
            (0, [4]),
            (0, [1, 2, 3, 4, 5, 6, 7, 8]),
            (5, [0, 8]),
            (6, [0, 8]),
            (7, [0, 8]),
            (8, [0, 1, 6, 7]),
            (
                4,
                [
                    0,
                    3,
                    5,
                ],
            ),
            (2, [8]),
            (3, [0]),
            (7, [0, 8, 3, 5]),
        ]

        results = [
            (9, [1, 7]),
            (6, [7, 8]),
            (10, [1, 5, 6, 3]),
            (11, [1, 5, 6, 4]),
            (20, [3, 4, 8, 7, 3, 4]),
            (16, [8, 0, 2]),
            (9, [0, 2, 3, 4]),
            (5, [0, 2]),
            (10, [5, 0]),
            (14, [6, 4, 8]),
            (6, [7, 8]),
            (6, [8, 7]),
            (18, [4, 8, 7, 3]),
            (18, [2, 3, 4, 8]),
            (26, [3, 4, 8, 0]),
            (6, [7, 8]),
        ]

        for test_case, ans in zip(test_cases, results):
            self.assertEqual(myforest.escape(*test_case), ans)

    def test_large_input(self):
        roads = [
            (0, 30, 21),
            (0, 17, 28),
            (0, 42, 21),
            (0, 41, 18),
            (0, 49, 3),
            (0, 48, 17),
            (0, 38, 29),
            (0, 44, 8),
            (0, 6, 8),
            (0, 39, 1),
            (1, 10, 23),
            (1, 0, 3),
            (1, 18, 12),
            (1, 36, 26),
            (1, 8, 12),
            (1, 21, 2),
            (1, 29, 2),
            (1, 12, 5),
            (1, 7, 10),
            (2, 22, 29),
            (2, 39, 6),
            (2, 21, 2),
            (2, 23, 1),
            (2, 27, 15),
            (2, 36, 20),
            (2, 25, 10),
            (2, 10, 6),
            (2, 28, 11),
            (2, 34, 5),
            (3, 32, 15),
            (3, 35, 25),
            (3, 39, 20),
            (3, 10, 8),
            (3, 37, 10),
            (3, 15, 9),
            (3, 6, 3),
            (3, 9, 13),
            (3, 38, 6),
            (3, 36, 8),
            (3, 21, 10),
            (4, 27, 23),
            (4, 45, 19),
            (4, 21, 2),
            (4, 46, 27),
            (4, 7, 25),
            (4, 31, 24),
            (4, 49, 15),
            (4, 20, 1),
            (4, 33, 23),
            (4, 22, 1),
            (5, 11, 5),
            (5, 3, 12),
            (5, 41, 24),
            (5, 18, 18),
            (5, 44, 27),
            (5, 19, 6),
            (5, 37, 7),
            (5, 23, 14),
            (5, 12, 25),
            (5, 42, 3),
            (5, 6, 24),
            (6, 17, 21),
            (6, 13, 2),
            (6, 9, 7),
            (6, 38, 19),
            (6, 47, 12),
            (6, 11, 17),
            (6, 30, 17),
            (6, 7, 28),
            (6, 18, 8),
            (6, 46, 15),
            (6, 36, 20),
            (7, 5, 16),
            (7, 39, 13),
            (7, 1, 18),
            (7, 42, 10),
            (7, 23, 8),
            (7, 0, 21),
            (7, 38, 14),
            (7, 15, 19),
            (7, 48, 30),
            (7, 13, 20),
            (7, 30, 9),
            (8, 19, 29),
            (8, 31, 16),
            (8, 9, 15),
            (8, 30, 22),
            (8, 41, 13),
            (8, 39, 22),
            (8, 11, 6),
            (8, 25, 23),
            (8, 49, 8),
            (8, 4, 26),
            (9, 45, 11),
            (9, 6, 21),
            (9, 31, 26),
            (9, 4, 23),
            (9, 18, 18),
            (9, 7, 18),
            (9, 11, 10),
            (9, 36, 16),
            (9, 10, 9),
            (9, 38, 14),
            (9, 47, 15),
            (10, 16, 27),
            (10, 46, 6),
            (10, 18, 2),
            (10, 35, 22),
            (10, 5, 20),
            (10, 38, 10),
            (10, 47, 8),
            (10, 14, 29),
            (10, 37, 29),
            (10, 22, 22),
            (10, 45, 28),
            (11, 33, 21),
            (11, 46, 24),
            (11, 2, 27),
            (11, 27, 24),
            (11, 6, 8),
            (11, 35, 12),
            (11, 5, 1),
            (11, 47, 20),
            (11, 34, 28),
            (11, 18, 28),
            (11, 15, 22),
            (12, 31, 5),
            (12, 21, 22),
            (12, 11, 29),
            (12, 34, 9),
            (12, 27, 15),
            (12, 28, 1),
            (12, 39, 26),
            (12, 9, 14),
            (12, 43, 20),
            (12, 3, 30),
            (13, 20, 11),
            (13, 24, 12),
            (13, 6, 6),
            (13, 1, 16),
            (13, 10, 4),
            (13, 33, 17),
            (13, 48, 13),
            (13, 36, 17),
            (13, 27, 11),
            (14, 12, 24),
            (14, 15, 27),
            (14, 2, 25),
            (14, 35, 14),
            (14, 49, 30),
            (14, 33, 16),
            (14, 11, 9),
            (14, 25, 28),
            (14, 38, 24),
            (14, 41, 2),
            (14, 23, 12),
            (14, 36, 29),
            (15, 6, 2),
            (15, 11, 14),
            (15, 27, 29),
            (15, 36, 18),
            (15, 2, 28),
            (15, 35, 4),
            (15, 16, 23),
            (15, 28, 13),
            (15, 21, 9),
            (15, 33, 28),
            (15, 45, 26),
            (15, 20, 22),
            (16, 1, 18),
            (16, 12, 25),
            (16, 31, 9),
            (16, 35, 28),
            (16, 24, 17),
            (16, 6, 7),
            (16, 40, 4),
            (16, 23, 29),
            (16, 20, 27),
            (16, 32, 1),
            (16, 43, 25),
            (17, 23, 3),
            (17, 11, 3),
            (17, 21, 24),
            (17, 15, 29),
            (17, 31, 27),
            (17, 13, 14),
            (17, 5, 1),
            (17, 3, 17),
            (17, 24, 16),
            (17, 19, 26),
            (17, 1, 21),
            (18, 26, 7),
            (18, 0, 4),
            (18, 12, 7),
            (18, 9, 24),
            (18, 41, 19),
            (18, 30, 19),
            (18, 46, 19),
            (18, 6, 30),
            (18, 8, 25),
            (18, 22, 25),
            (18, 48, 17),
            (18, 15, 22),
            (19, 24, 20),
            (19, 17, 12),
            (19, 28, 26),
            (19, 32, 1),
            (19, 22, 24),
            (19, 2, 3),
            (19, 43, 20),
            (19, 18, 8),
            (19, 39, 25),
            (19, 6, 9),
            (19, 20, 9),
            (20, 30, 12),
            (20, 9, 25),
            (20, 15, 12),
            (20, 35, 19),
            (20, 33, 26),
            (20, 2, 19),
            (20, 16, 20),
            (20, 34, 18),
            (20, 40, 23),
            (20, 48, 30),
            (20, 46, 22),
            (21, 32, 20),
            (21, 2, 16),
            (21, 44, 22),
            (21, 5, 6),
            (21, 31, 12),
            (21, 35, 27),
            (21, 1, 10),
            (21, 3, 17),
            (21, 10, 19),
            (21, 15, 1),
            (22, 15, 19),
            (22, 41, 26),
            (22, 20, 27),
            (22, 25, 19),
            (22, 19, 24),
            (22, 29, 11),
            (22, 12, 20),
            (22, 5, 15),
            (22, 28, 10),
            (22, 46, 1),
            (23, 42, 30),
            (23, 32, 1),
            (23, 19, 17),
            (23, 18, 9),
            (23, 28, 12),
            (23, 36, 24),
            (23, 44, 24),
            (23, 20, 24),
            (23, 37, 2),
            (23, 17, 20),
            (23, 16, 1),
            (24, 3, 15),
            (24, 20, 5),
            (24, 1, 29),
            (24, 28, 11),
            (24, 12, 20),
            (24, 37, 18),
            (24, 31, 21),
            (24, 15, 30),
            (24, 41, 23),
            (24, 21, 21),
            (24, 2, 19),
            (25, 24, 15),
            (25, 16, 3),
            (25, 40, 9),
            (25, 12, 18),
            (25, 4, 18),
            (25, 0, 1),
            (25, 26, 1),
            (25, 39, 2),
            (25, 49, 25),
            (25, 15, 4),
            (26, 43, 30),
            (26, 11, 3),
            (26, 47, 29),
            (26, 10, 8),
            (26, 3, 18),
            (26, 48, 29),
            (26, 13, 1),
            (26, 33, 6),
            (26, 25, 8),
            (27, 30, 27),
            (27, 38, 9),
            (27, 48, 16),
            (27, 35, 22),
            (27, 19, 4),
            (27, 47, 23),
            (27, 32, 16),
            (27, 13, 14),
            (27, 3, 23),
            (28, 33, 9),
            (28, 7, 1),
            (28, 1, 5),
            (28, 4, 26),
            (28, 34, 25),
            (28, 38, 7),
            (28, 16, 15),
            (28, 0, 9),
            (28, 10, 14),
            (28, 11, 10),
            (28, 14, 16),
            (28, 42, 20),
            (29, 17, 29),
            (29, 18, 17),
            (29, 14, 5),
            (29, 44, 8),
            (29, 13, 3),
            (29, 39, 14),
            (29, 42, 7),
            (29, 0, 6),
            (29, 47, 10),
            (29, 38, 15),
            (30, 12, 7),
            (30, 40, 2),
            (30, 26, 29),
            (30, 49, 25),
            (30, 6, 25),
            (30, 46, 29),
            (30, 35, 4),
            (30, 38, 17),
            (30, 41, 16),
            (30, 4, 22),
            (31, 13, 3),
            (31, 36, 10),
            (31, 14, 21),
            (31, 42, 7),
            (31, 32, 15),
            (31, 39, 8),
            (31, 28, 26),
            (31, 44, 3),
            (31, 35, 17),
            (31, 25, 29),
            (31, 27, 3),
            (31, 1, 6),
            (32, 40, 18),
            (32, 44, 25),
            (32, 21, 8),
            (32, 9, 17),
            (32, 26, 25),
            (32, 41, 9),
            (32, 23, 11),
            (32, 15, 17),
            (32, 46, 16),
            (32, 24, 12),
            (32, 27, 8),
            (33, 7, 20),
            (33, 21, 2),
            (33, 29, 27),
            (33, 13, 13),
            (33, 10, 25),
            (33, 12, 26),
            (33, 27, 15),
            (33, 32, 8),
            (33, 3, 12),
            (33, 39, 17),
            (33, 43, 6),
            (34, 32, 9),
            (34, 27, 13),
            (34, 5, 25),
            (34, 11, 23),
            (34, 49, 8),
            (34, 3, 24),
            (34, 19, 4),
            (34, 13, 22),
            (34, 24, 26),
            (34, 17, 10),
            (34, 42, 1),
            (34, 18, 16),
            (35, 19, 16),
            (35, 17, 9),
            (35, 5, 21),
            (35, 29, 15),
            (35, 37, 3),
            (35, 41, 3),
            (35, 39, 10),
            (35, 2, 19),
            (35, 36, 18),
            (35, 38, 10),
            (35, 43, 28),
            (35, 0, 28),
            (36, 46, 21),
            (36, 39, 2),
            (36, 16, 9),
            (36, 37, 22),
            (36, 28, 14),
            (36, 45, 10),
            (36, 18, 17),
            (36, 47, 30),
            (36, 35, 13),
            (36, 20, 18),
            (36, 33, 9),
            (36, 49, 14),
            (37, 22, 12),
            (37, 12, 7),
            (37, 10, 2),
            (37, 48, 8),
            (37, 35, 21),
            (37, 31, 21),
            (37, 43, 18),
            (37, 47, 6),
            (37, 6, 23),
            (38, 49, 15),
            (38, 10, 11),
            (38, 46, 10),
            (38, 30, 17),
            (38, 7, 1),
            (38, 44, 12),
            (38, 41, 10),
            (38, 0, 23),
            (38, 6, 16),
            (39, 31, 29),
            (39, 25, 27),
            (39, 5, 4),
            (39, 47, 8),
            (39, 20, 17),
            (39, 37, 24),
            (39, 46, 11),
            (39, 49, 13),
            (39, 8, 18),
            (39, 16, 27),
            (40, 16, 3),
            (40, 27, 23),
            (40, 13, 4),
            (40, 6, 10),
            (40, 30, 20),
            (40, 19, 30),
            (40, 36, 10),
            (40, 21, 7),
            (40, 39, 7),
            (40, 37, 20),
            (41, 17, 29),
            (41, 47, 20),
            (41, 25, 13),
            (41, 3, 11),
            (41, 2, 29),
            (41, 5, 8),
            (41, 38, 5),
            (41, 11, 21),
            (41, 21, 18),
            (41, 7, 28),
            (41, 13, 15),
            (41, 37, 27),
            (42, 38, 16),
            (42, 24, 15),
            (42, 33, 6),
            (42, 11, 11),
            (42, 13, 10),
            (42, 2, 22),
            (42, 44, 19),
            (42, 14, 30),
            (42, 49, 17),
            (42, 37, 7),
            (42, 30, 23),
            (43, 36, 14),
            (43, 30, 4),
            (43, 34, 16),
            (43, 37, 28),
            (43, 20, 29),
            (43, 21, 7),
            (43, 15, 16),
            (43, 27, 18),
            (43, 0, 16),
            (43, 39, 4),
            (44, 21, 1),
            (44, 26, 8),
            (44, 39, 30),
            (44, 7, 4),
            (44, 43, 19),
            (44, 47, 18),
            (44, 27, 17),
            (44, 48, 4),
            (44, 8, 22),
            (44, 49, 29),
            (44, 10, 27),
            (45, 43, 23),
            (45, 15, 30),
            (45, 47, 10),
            (45, 41, 18),
            (45, 26, 7),
            (45, 14, 28),
            (45, 23, 7),
            (45, 40, 17),
            (45, 10, 1),
            (45, 36, 26),
            (45, 42, 11),
            (45, 12, 10),
            (46, 32, 3),
            (46, 18, 16),
            (46, 47, 9),
            (46, 5, 15),
            (46, 8, 8),
            (46, 36, 9),
            (46, 20, 26),
            (46, 28, 19),
            (46, 45, 29),
            (46, 14, 27),
            (47, 7, 12),
            (47, 30, 25),
            (47, 45, 4),
            (47, 41, 29),
            (47, 21, 21),
            (47, 10, 19),
            (47, 5, 14),
            (47, 4, 28),
            (47, 29, 11),
            (47, 14, 9),
            (48, 1, 14),
            (48, 33, 2),
            (48, 32, 16),
            (48, 47, 14),
            (48, 8, 19),
            (48, 41, 3),
            (48, 45, 10),
            (48, 5, 18),
            (49, 14, 10),
            (49, 11, 16),
            (49, 46, 19),
            (49, 32, 29),
            (49, 23, 13),
            (49, 21, 6),
            (49, 13, 11),
            (49, 9, 17),
            (49, 30, 21),
            (49, 20, 11),
            (49, 38, 19),
            (49, 37, 10),
        ]

        solulus = [(49, 5, 37)]
        exits = [35, 31, 43]

        myforest = TreeMap(roads, solulus)
        self.assertEqual(myforest.escape(0, exits), (20, [0, 49, 37, 12, 31]))


if __name__ == "__main__":
    unittest.main()
